---
- name: "Pre-deploy checks"
  hosts: all
  any_errors_fatal: true
  gather_facts: false
  become: false
  vars:
    #
    # Disable Ansible's interpretor detection logic,
    # which would fail to use the interpretor from an activated virtual environment.
    #
    ansible_python_interpreter: python
  pre_tasks:
    - name: 'Verify Ansible version meets requirements.'
      ansible.builtin.assert:
        that: "ansible_version.full is version_compare(minimal_ansible_version, '>=')"
        msg: "You must update Ansible to at least {{ minimal_ansible_version }}.x to use this playbook."
      vars:
        minimal_ansible_version: 2.10
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
    - name: 'Verify that we are running inside a Python virtual environment before we try to fetch dependencies from Ansible Galaxy.'
      ansible.builtin.assert:
        that: lookup('ansible.builtin.env', 'VIRTUAL_ENV', default=Undefined) is defined
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
    - name: 'Verify that collections and roles will be installed inside our Python virtual environment before we try to fetch dependencies from Ansible Galaxy.'
      ansible.builtin.assert:
        that: lookup('ansible.builtin.env', item, default=Undefined) is defined
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
      loop:
        - ANSIBLE_ROLES_PATH
        - ANSIBLE_COLLECTIONS_PATH
    - name: 'Verify that the group_vars were parsed.'
      ansible.builtin.assert:
        that: hpc_env_prefix is defined
        msg: "FATAL: the hpc_env_prefix Ansible variable is undefined, which suggests that the group_vars were not parsed."
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
    - name: 'Download dependencies from Ansible Galaxy on the Ansible control host.'
      ansible.builtin.command:
        cmd: ansible-galaxy install -r requirements.yml{% if ansible_version.full is version_compare('2.15', '>=') %} --timeout 120{% endif %}
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
      register: resolved_dependencies
      changed_when: "'installed successfully' in resolved_dependencies.stdout"
      retries: 3
      delay: 10
      until: resolved_dependencies is not failed
- name: 'Create remote tmp dir on DAI and chaperone machines.'
  hosts: deploy_admin_interface, chaperone
  any_errors_fatal: true
  become: false
  tasks:
    - name: "Create remote '.tmp/' dir in {{ hpc_env_prefix }}"
      ansible.builtin.file:
        path: "{{ hpc_env_prefix }}/.tmp/"
        state: 'directory'
        mode: "{{ MODE_2775_HARD }}"
...
